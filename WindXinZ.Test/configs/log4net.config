<?xml version="1.0" encoding="utf-8"?>
<log4net debug="false">
  <root>
    <level value="DEBUG" />
    <appender-ref ref="RollingFileAppender" />
    <appender-ref ref="ErrorRollingFileAppender" />
  </root>
  <logger name="RainHyacinth" additivity="false" >
    <level value="DEBUG" />
    <appender-ref ref="RainHyacinthRollingFileAppender" />
    <appender-ref ref="RainHyacinthErrorRollingFileAppender" />
  </logger>
  <appender name="RollingFileAppender"  type="log4net.Appender.RollingFileAppender" >
    <param name="File" value="Logs\" />
    <param name="AppendToFile" value="true" />
    <param name="RollingStyle" value="Composite"/>
    <param name="CountDirection" value="-1"/>
    <param name="MaxSizeRollBackups" value="-1"/>
    <param name="MaximumFileSize" value="5MB"/>
    <param name="StaticLogFileName" value="false"/>
    <param name="DatePattern" value="yyyy\\MM\\dd\\HH&quot;_Info.txt&quot;"/>
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%d | 线程:[%t] | 级别:%-5p | 对象:%c | 信息: %m%n" />
    </layout>
    <filter type="log4net.Filter.LevelRangeFilter">
      <param name="LevelMin" value="DEBUG" />
      <param name="LevelMax" value="WARN" />
    </filter>
  </appender>
  <appender name="ErrorRollingFileAppender"  type="log4net.Appender.RollingFileAppender" LEVEL="ERROR">
    <param name="File" value="Logs\" />
    <!--是否续写-->
    <param name="AppendToFile" value="true" />
    <!--按照文件的大小进行变换日志文件-->
    <param name="RollingStyle" value="Composite" />
    <param name="CountDirection" value="-1"/>
    <param name="MaxSizeRollBackups" value="-1"/>
    <param name="MaximumFileSize" value="5MB"/>
    <param name="StaticLogFileName" value="false"/>
    <param name="DatePattern" value="yyyy\\MM\\dd\\HH&quot;_Error.txt&quot;"/>
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%d | 线程:[%t] | 级别:%-5p | 对象:%c | 信息: %m%n" />
    </layout>
    <filter type="log4net.Filter.LevelRangeFilter">
      <param name="LevelMin" value="ERROR" />
      <param name="LevelMax" value="FATAL" />
    </filter>
  </appender>

  <appender name="RainHyacinthRollingFileAppender"  type="log4net.Appender.RollingFileAppender" >
    <param name="File" value="Logs\RainHyacinthlog.log" />
    <param name="AppendToFile" value="true" />
    <param name="RollingStyle" value="Once"/>
    <param name="CountDirection" value="-1"/>
    <param name="MaxSizeRollBackups" value="-1"/>
    <param name="MaximumFileSize" value="5MB"/>
    <param name="StaticLogFileName" value="true"/>
    <param name="DatePattern" value="yyyyMMdd&quot;.log&quot;"/>
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%d | 线程:[%t] | 级别:%-5p | 对象:%c | 信息: %m%n" />
    </layout>
    <filter type="log4net.Filter.LevelRangeFilter">
      <param name="LevelMin" value="DEBUG" />
      <param name="LevelMax" value="WARN" />
    </filter>
  </appender>
  <appender name="RainHyacinthErrorRollingFileAppender"  type="log4net.Appender.RollingFileAppender" LEVEL="ERROR">
    <param name="File" value="Logs\" />
    <!--是否续写-->
    <param name="AppendToFile" value="true" />
    <!--按照文件的大小进行变换日志文件-->
    <param name="RollingStyle" value="Composite" />
    <param name="CountDirection" value="-1"/>
    <param name="MaxSizeRollBackups" value="-1"/>
    <param name="MaximumFileSize" value="5MB"/>
    <param name="StaticLogFileName" value="false"/>
    <param name="DatePattern" value="yyyyMMdd&quot;.log&quot;"/>
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%d | 线程:[%t] | 级别:%-5p | 对象:%c | 信息: %m%n" />
    </layout>
    <filter type="log4net.Filter.LevelRangeFilter">
      <param name="LevelMin" value="ERROR" />
      <param name="LevelMax" value="FATAL" />
    </filter>
  </appender>
</log4net>
<!--
%m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息

%n(new line):换行

%d(datetime):输出当前语句运行的时刻

%r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数

%t(thread id):当前语句所在的线程ID

%p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等

%c(class):当前日志对象的名称，例如：

模式字符串为：%-10c -%m%n

代码为：

ILog log=LogManager.GetLogger(“Exam.Log”);

log.Debug(“Hello”);

则输出为下面的形式：

Exam.Log       - Hello

%L：输出语句所在的行号

%F：输出语句所在的文件名

%-数字：表示该项的最小长度，如果不够，则用空格填充
-->
<!--        http://blog.163.com/lyz_sea/blog/static/115586707201110161145022/           -->